// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: internal/proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SportsbookService_ListPrematch_FullMethodName  = "/proto.SportsbookService/ListPrematch"
	SportsbookService_SendLiveOdds_FullMethodName  = "/proto.SportsbookService/SendLiveOdds"
	SportsbookService_SendLiveScore_FullMethodName = "/proto.SportsbookService/SendLiveScore"
)

// SportsbookServiceClient is the client API for SportsbookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportsbookServiceClient interface {
	// Sends a request to list all permatches available
	ListPrematch(ctx context.Context, in *ListPrematchRequest, opts ...grpc.CallOption) (*ListPrematchResponse, error)
	SendLiveOdds(ctx context.Context, in *LiveOddsRequest, opts ...grpc.CallOption) (SportsbookService_SendLiveOddsClient, error)
	SendLiveScore(ctx context.Context, in *LiveScoreRequest, opts ...grpc.CallOption) (SportsbookService_SendLiveScoreClient, error)
}

type sportsbookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSportsbookServiceClient(cc grpc.ClientConnInterface) SportsbookServiceClient {
	return &sportsbookServiceClient{cc}
}

func (c *sportsbookServiceClient) ListPrematch(ctx context.Context, in *ListPrematchRequest, opts ...grpc.CallOption) (*ListPrematchResponse, error) {
	out := new(ListPrematchResponse)
	err := c.cc.Invoke(ctx, SportsbookService_ListPrematch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsbookServiceClient) SendLiveOdds(ctx context.Context, in *LiveOddsRequest, opts ...grpc.CallOption) (SportsbookService_SendLiveOddsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SportsbookService_ServiceDesc.Streams[0], SportsbookService_SendLiveOdds_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsbookServiceSendLiveOddsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportsbookService_SendLiveOddsClient interface {
	Recv() (*LiveOddsData, error)
	grpc.ClientStream
}

type sportsbookServiceSendLiveOddsClient struct {
	grpc.ClientStream
}

func (x *sportsbookServiceSendLiveOddsClient) Recv() (*LiveOddsData, error) {
	m := new(LiveOddsData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sportsbookServiceClient) SendLiveScore(ctx context.Context, in *LiveScoreRequest, opts ...grpc.CallOption) (SportsbookService_SendLiveScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &SportsbookService_ServiceDesc.Streams[1], SportsbookService_SendLiveScore_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &sportsbookServiceSendLiveScoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SportsbookService_SendLiveScoreClient interface {
	Recv() (*LiveScoreData, error)
	grpc.ClientStream
}

type sportsbookServiceSendLiveScoreClient struct {
	grpc.ClientStream
}

func (x *sportsbookServiceSendLiveScoreClient) Recv() (*LiveScoreData, error) {
	m := new(LiveScoreData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SportsbookServiceServer is the server API for SportsbookService service.
// All implementations must embed UnimplementedSportsbookServiceServer
// for forward compatibility
type SportsbookServiceServer interface {
	// Sends a request to list all permatches available
	ListPrematch(context.Context, *ListPrematchRequest) (*ListPrematchResponse, error)
	SendLiveOdds(*LiveOddsRequest, SportsbookService_SendLiveOddsServer) error
	SendLiveScore(*LiveScoreRequest, SportsbookService_SendLiveScoreServer) error
	mustEmbedUnimplementedSportsbookServiceServer()
}

// UnimplementedSportsbookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSportsbookServiceServer struct {
}

func (UnimplementedSportsbookServiceServer) ListPrematch(context.Context, *ListPrematchRequest) (*ListPrematchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrematch not implemented")
}
func (UnimplementedSportsbookServiceServer) SendLiveOdds(*LiveOddsRequest, SportsbookService_SendLiveOddsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLiveOdds not implemented")
}
func (UnimplementedSportsbookServiceServer) SendLiveScore(*LiveScoreRequest, SportsbookService_SendLiveScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method SendLiveScore not implemented")
}
func (UnimplementedSportsbookServiceServer) mustEmbedUnimplementedSportsbookServiceServer() {}

// UnsafeSportsbookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportsbookServiceServer will
// result in compilation errors.
type UnsafeSportsbookServiceServer interface {
	mustEmbedUnimplementedSportsbookServiceServer()
}

func RegisterSportsbookServiceServer(s grpc.ServiceRegistrar, srv SportsbookServiceServer) {
	s.RegisterService(&SportsbookService_ServiceDesc, srv)
}

func _SportsbookService_ListPrematch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrematchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsbookServiceServer).ListPrematch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SportsbookService_ListPrematch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsbookServiceServer).ListPrematch(ctx, req.(*ListPrematchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SportsbookService_SendLiveOdds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveOddsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportsbookServiceServer).SendLiveOdds(m, &sportsbookServiceSendLiveOddsServer{stream})
}

type SportsbookService_SendLiveOddsServer interface {
	Send(*LiveOddsData) error
	grpc.ServerStream
}

type sportsbookServiceSendLiveOddsServer struct {
	grpc.ServerStream
}

func (x *sportsbookServiceSendLiveOddsServer) Send(m *LiveOddsData) error {
	return x.ServerStream.SendMsg(m)
}

func _SportsbookService_SendLiveScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SportsbookServiceServer).SendLiveScore(m, &sportsbookServiceSendLiveScoreServer{stream})
}

type SportsbookService_SendLiveScoreServer interface {
	Send(*LiveScoreData) error
	grpc.ServerStream
}

type sportsbookServiceSendLiveScoreServer struct {
	grpc.ServerStream
}

func (x *sportsbookServiceSendLiveScoreServer) Send(m *LiveScoreData) error {
	return x.ServerStream.SendMsg(m)
}

// SportsbookService_ServiceDesc is the grpc.ServiceDesc for SportsbookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SportsbookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SportsbookService",
	HandlerType: (*SportsbookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrematch",
			Handler:    _SportsbookService_ListPrematch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendLiveOdds",
			Handler:       _SportsbookService_SendLiveOdds_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendLiveScore",
			Handler:       _SportsbookService_SendLiveScore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/service.proto",
}
