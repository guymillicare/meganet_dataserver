// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v5.26.1
// source: internal/proto/data-feed.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventStatus int32

const (
	EventStatus_not_active  EventStatus = 0
	EventStatus_not_started EventStatus = 1
	EventStatus_live        EventStatus = 2
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "not_active",
		1: "not_started",
		2: "live",
	}
	EventStatus_value = map[string]int32{
		"not_active":  0,
		"not_started": 1,
		"live":        2,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_data_feed_proto_enumTypes[0].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_internal_proto_data_feed_proto_enumTypes[0]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{0}
}

type SettlementStatus int32

const (
	SettlementStatus_unsettled     SettlementStatus = 0
	SettlementStatus_won           SettlementStatus = 1
	SettlementStatus_half_won      SettlementStatus = 2
	SettlementStatus_refunded      SettlementStatus = 3
	SettlementStatus_half_refunded SettlementStatus = 4
	SettlementStatus_lost          SettlementStatus = 5
)

// Enum value maps for SettlementStatus.
var (
	SettlementStatus_name = map[int32]string{
		0: "unsettled",
		1: "won",
		2: "half_won",
		3: "refunded",
		4: "half_refunded",
		5: "lost",
	}
	SettlementStatus_value = map[string]int32{
		"unsettled":     0,
		"won":           1,
		"half_won":      2,
		"refunded":      3,
		"half_refunded": 4,
		"lost":          5,
	}
)

func (x SettlementStatus) Enum() *SettlementStatus {
	p := new(SettlementStatus)
	*p = x
	return p
}

func (x SettlementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_data_feed_proto_enumTypes[1].Descriptor()
}

func (SettlementStatus) Type() protoreflect.EnumType {
	return &file_internal_proto_data_feed_proto_enumTypes[1]
}

func (x SettlementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementStatus.Descriptor instead.
func (SettlementStatus) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{1}
}

type Sport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sort         int32             `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32             `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64             `protobuf:"varint,5,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string `protobuf:"bytes,6,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Sport) Reset() {
	*x = Sport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sport) ProtoMessage() {}

func (x *Sport) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sport.ProtoReflect.Descriptor instead.
func (*Sport) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{0}
}

func (x *Sport) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sport) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Sport) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *Sport) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Sport) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Iso2         *string           `protobuf:"bytes,3,opt,name=iso2,proto3,oneof" json:"iso2,omitempty"`
	Sort         int32             `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32             `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64             `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string `protobuf:"bytes,7,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Country) Reset() {
	*x = Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Country) ProtoMessage() {}

func (x *Country) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Country.ProtoReflect.Descriptor instead.
func (*Country) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{1}
}

func (x *Country) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Country) GetIso2() string {
	if x != nil && x.Iso2 != nil {
		return *x.Iso2
	}
	return ""
}

func (x *Country) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Country) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *Country) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Country) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type SportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*Sport `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SportResponse) Reset() {
	*x = SportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportResponse) ProtoMessage() {}

func (x *SportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportResponse.ProtoReflect.Descriptor instead.
func (*SportResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{2}
}

func (x *SportResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SportResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SportResponse) GetData() []*Sport {
	if x != nil {
		return x.Data
	}
	return nil
}

type CountryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string    `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*Country `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CountryResponse) Reset() {
	*x = CountryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountryResponse) ProtoMessage() {}

func (x *CountryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountryResponse.ProtoReflect.Descriptor instead.
func (*CountryResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{3}
}

func (x *CountryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CountryResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CountryResponse) GetData() []*Country {
	if x != nil {
		return x.Data
	}
	return nil
}

type SportCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SportId   int32 `protobuf:"varint,2,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	CountryId int32 `protobuf:"varint,3,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (x *SportCountry) Reset() {
	*x = SportCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportCountry) ProtoMessage() {}

func (x *SportCountry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportCountry.ProtoReflect.Descriptor instead.
func (*SportCountry) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{4}
}

func (x *SportCountry) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SportCountry) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *SportCountry) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

type Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SportCountry *SportCountry     `protobuf:"bytes,3,opt,name=sport_country,json=sportCountry,proto3" json:"sport_country,omitempty"`
	IsWomen      bool              `protobuf:"varint,4,opt,name=is_women,json=isWomen,proto3" json:"is_women,omitempty"`
	IsYoung      bool              `protobuf:"varint,5,opt,name=is_young,json=isYoung,proto3" json:"is_young,omitempty"`
	IsCyber      bool              `protobuf:"varint,6,opt,name=is_cyber,json=isCyber,proto3" json:"is_cyber,omitempty"`
	IsDoubles    bool              `protobuf:"varint,7,opt,name=is_doubles,json=isDoubles,proto3" json:"is_doubles,omitempty"`
	Sort         int32             `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32             `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64             `protobuf:"varint,10,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string `protobuf:"bytes,11,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Tournament) Reset() {
	*x = Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tournament) ProtoMessage() {}

func (x *Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tournament.ProtoReflect.Descriptor instead.
func (*Tournament) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{5}
}

func (x *Tournament) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tournament) GetSportCountry() *SportCountry {
	if x != nil {
		return x.SportCountry
	}
	return nil
}

func (x *Tournament) GetIsWomen() bool {
	if x != nil {
		return x.IsWomen
	}
	return false
}

func (x *Tournament) GetIsYoung() bool {
	if x != nil {
		return x.IsYoung
	}
	return false
}

func (x *Tournament) GetIsCyber() bool {
	if x != nil {
		return x.IsCyber
	}
	return false
}

func (x *Tournament) GetIsDoubles() bool {
	if x != nil {
		return x.IsDoubles
	}
	return false
}

func (x *Tournament) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *Tournament) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *Tournament) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Tournament) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HasLogo      bool              `protobuf:"varint,3,opt,name=has_logo,json=hasLogo,proto3" json:"has_logo,omitempty"`
	Hash         int32             `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64             `protobuf:"varint,5,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string `protobuf:"bytes,6,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{6}
}

func (x *Team) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetHasLogo() bool {
	if x != nil {
		return x.HasLogo
	}
	return false
}

func (x *Team) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *Team) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *Team) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type TournamentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId   *int32 `protobuf:"varint,1,opt,name=sport_id,json=sportId,proto3,oneof" json:"sport_id,omitempty"`
	CountryId *int32 `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3,oneof" json:"country_id,omitempty"`
}

func (x *TournamentRequest) Reset() {
	*x = TournamentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentRequest) ProtoMessage() {}

func (x *TournamentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentRequest.ProtoReflect.Descriptor instead.
func (*TournamentRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{7}
}

func (x *TournamentRequest) GetSportId() int32 {
	if x != nil && x.SportId != nil {
		return *x.SportId
	}
	return 0
}

func (x *TournamentRequest) GetCountryId() int32 {
	if x != nil && x.CountryId != nil {
		return *x.CountryId
	}
	return 0
}

type TournamentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool          `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string       `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*Tournament `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TournamentResponse) Reset() {
	*x = TournamentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentResponse) ProtoMessage() {}

func (x *TournamentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentResponse.ProtoReflect.Descriptor instead.
func (*TournamentResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{8}
}

func (x *TournamentResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TournamentResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TournamentResponse) GetData() []*Tournament {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketDefinitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string                                  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*MarketDefinitionsResponse_MarketGroup `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketDefinitionsResponse) Reset() {
	*x = MarketDefinitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDefinitionsResponse) ProtoMessage() {}

func (x *MarketDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*MarketDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{9}
}

func (x *MarketDefinitionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MarketDefinitionsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *MarketDefinitionsResponse) GetData() []*MarketDefinitionsResponse_MarketGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

type MatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       []EventStatus `protobuf:"varint,1,rep,packed,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	SportId      []int32       `protobuf:"varint,2,rep,packed,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	CountryId    []int32       `protobuf:"varint,3,rep,packed,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	TournamentId []int32       `protobuf:"varint,4,rep,packed,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	StartDate    *int64        `protobuf:"varint,5,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate      *int64        `protobuf:"varint,6,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
}

func (x *MatchesRequest) Reset() {
	*x = MatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesRequest) ProtoMessage() {}

func (x *MatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesRequest.ProtoReflect.Descriptor instead.
func (*MatchesRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{10}
}

func (x *MatchesRequest) GetStatus() []EventStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MatchesRequest) GetSportId() []int32 {
	if x != nil {
		return x.SportId
	}
	return nil
}

func (x *MatchesRequest) GetCountryId() []int32 {
	if x != nil {
		return x.CountryId
	}
	return nil
}

func (x *MatchesRequest) GetTournamentId() []int32 {
	if x != nil {
		return x.TournamentId
	}
	return nil
}

func (x *MatchesRequest) GetStartDate() int64 {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return 0
}

func (x *MatchesRequest) GetEndDate() int64 {
	if x != nil && x.EndDate != nil {
		return *x.EndDate
	}
	return 0
}

type MatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string                  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*MatchesResponse_Sport `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MatchesResponse) Reset() {
	*x = MatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse) ProtoMessage() {}

func (x *MatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse.ProtoReflect.Descriptor instead.
func (*MatchesResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11}
}

func (x *MatchesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchesResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *MatchesResponse) GetData() []*MatchesResponse_Sport {
	if x != nil {
		return x.Data
	}
	return nil
}

type MatchSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []int32  `protobuf:"varint,1,rep,packed,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	Lang     []string `protobuf:"bytes,2,rep,name=lang,proto3" json:"lang,omitempty"`
}

func (x *MatchSnapshotsRequest) Reset() {
	*x = MatchSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsRequest) ProtoMessage() {}

func (x *MatchSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{12}
}

func (x *MatchSnapshotsRequest) GetMatchIds() []int32 {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *MatchSnapshotsRequest) GetLang() []string {
	if x != nil {
		return x.Lang
	}
	return nil
}

type MarketParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *int32 `protobuf:"varint,1,opt,name=param,proto3,oneof" json:"param,omitempty"`
	High  *int32 `protobuf:"varint,2,opt,name=high,proto3,oneof" json:"high,omitempty"`
	Low   *int32 `protobuf:"varint,3,opt,name=low,proto3,oneof" json:"low,omitempty"`
}

func (x *MarketParam) Reset() {
	*x = MarketParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketParam) ProtoMessage() {}

func (x *MarketParam) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketParam.ProtoReflect.Descriptor instead.
func (*MarketParam) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{13}
}

func (x *MarketParam) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *MarketParam) GetHigh() int32 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *MarketParam) GetLow() int32 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

type MatchSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string                                 `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*MatchSnapshotsResponse_MatchSnapshot `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MatchSnapshotsResponse) Reset() {
	*x = MatchSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsResponse) ProtoMessage() {}

func (x *MatchSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{14}
}

func (x *MatchSnapshotsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchSnapshotsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *MatchSnapshotsResponse) GetData() []*MatchSnapshotsResponse_MatchSnapshot {
	if x != nil {
		return x.Data
	}
	return nil
}

type SyncDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message *string                  `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	Data    []*SyncDataResponseMatch `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SyncDataResponse) Reset() {
	*x = SyncDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDataResponse) ProtoMessage() {}

func (x *SyncDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDataResponse.ProtoReflect.Descriptor instead.
func (*SyncDataResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{15}
}

func (x *SyncDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncDataResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SyncDataResponse) GetData() []*SyncDataResponseMatch {
	if x != nil {
		return x.Data
	}
	return nil
}

type FeedUpdateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//
	//	*FeedUpdateData_Match
	//	*FeedUpdateData_Game
	//	*FeedUpdateData_MatchResult_
	//	*FeedUpdateData_Settlement_
	Data isFeedUpdateData_Data `protobuf_oneof:"data"`
}

func (x *FeedUpdateData) Reset() {
	*x = FeedUpdateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData) ProtoMessage() {}

func (x *FeedUpdateData) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData.ProtoReflect.Descriptor instead.
func (*FeedUpdateData) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16}
}

func (m *FeedUpdateData) GetData() isFeedUpdateData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FeedUpdateData) GetMatch() *FeedUpdateData_MatchUpdate {
	if x, ok := x.GetData().(*FeedUpdateData_Match); ok {
		return x.Match
	}
	return nil
}

func (x *FeedUpdateData) GetGame() *FeedUpdateData_GameUpdate {
	if x, ok := x.GetData().(*FeedUpdateData_Game); ok {
		return x.Game
	}
	return nil
}

func (x *FeedUpdateData) GetMatchResult() *FeedUpdateData_MatchResult {
	if x, ok := x.GetData().(*FeedUpdateData_MatchResult_); ok {
		return x.MatchResult
	}
	return nil
}

func (x *FeedUpdateData) GetSettlement() *FeedUpdateData_Settlement {
	if x, ok := x.GetData().(*FeedUpdateData_Settlement_); ok {
		return x.Settlement
	}
	return nil
}

type isFeedUpdateData_Data interface {
	isFeedUpdateData_Data()
}

type FeedUpdateData_Match struct {
	Match *FeedUpdateData_MatchUpdate `protobuf:"bytes,1,opt,name=match,proto3,oneof"`
}

type FeedUpdateData_Game struct {
	Game *FeedUpdateData_GameUpdate `protobuf:"bytes,2,opt,name=game,proto3,oneof"`
}

type FeedUpdateData_MatchResult_ struct {
	MatchResult *FeedUpdateData_MatchResult `protobuf:"bytes,3,opt,name=match_result,json=matchResult,proto3,oneof"`
}

type FeedUpdateData_Settlement_ struct {
	Settlement *FeedUpdateData_Settlement `protobuf:"bytes,4,opt,name=settlement,proto3,oneof"`
}

func (*FeedUpdateData_Match) isFeedUpdateData_Data() {}

func (*FeedUpdateData_Game) isFeedUpdateData_Data() {}

func (*FeedUpdateData_MatchResult_) isFeedUpdateData_Data() {}

func (*FeedUpdateData_Settlement_) isFeedUpdateData_Data() {}

type BetControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OddsIds []int64 `protobuf:"varint,1,rep,packed,name=oddsIds,proto3" json:"oddsIds,omitempty"`
}

func (x *BetControlRequest) Reset() {
	*x = BetControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetControlRequest) ProtoMessage() {}

func (x *BetControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetControlRequest.ProtoReflect.Descriptor instead.
func (*BetControlRequest) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{17}
}

func (x *BetControlRequest) GetOddsIds() []int64 {
	if x != nil {
		return x.OddsIds
	}
	return nil
}

type BetControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string                                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*BetControlResponse_BetControlStatus `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BetControlResponse) Reset() {
	*x = BetControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetControlResponse) ProtoMessage() {}

func (x *BetControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetControlResponse.ProtoReflect.Descriptor instead.
func (*BetControlResponse) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{18}
}

func (x *BetControlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BetControlResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BetControlResponse) GetData() []*BetControlResponse_BetControlStatus {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketDefinitionsResponse_MarketGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sort            int32                                                   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash            int32                                                   `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Translations    map[string]string                                       `protobuf:"bytes,5,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastUpdate      int64                                                   `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	MarketTemplates []*MarketDefinitionsResponse_MarketGroup_MarketTemplate `protobuf:"bytes,7,rep,name=market_templates,json=marketTemplates,proto3" json:"market_templates,omitempty"`
}

func (x *MarketDefinitionsResponse_MarketGroup) Reset() {
	*x = MarketDefinitionsResponse_MarketGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDefinitionsResponse_MarketGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDefinitionsResponse_MarketGroup) ProtoMessage() {}

func (x *MarketDefinitionsResponse_MarketGroup) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDefinitionsResponse_MarketGroup.ProtoReflect.Descriptor instead.
func (*MarketDefinitionsResponse_MarketGroup) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{9, 0}
}

func (x *MarketDefinitionsResponse_MarketGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDefinitionsResponse_MarketGroup) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *MarketDefinitionsResponse_MarketGroup) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup) GetMarketTemplates() []*MarketDefinitionsResponse_MarketGroup_MarketTemplate {
	if x != nil {
		return x.MarketTemplates
	}
	return nil
}

type MarketDefinitionsResponse_MarketGroup_MarketTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                                                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                                                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sort         int32                                                                   `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32                                                                   `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Translations map[string]string                                                       `protobuf:"bytes,5,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastUpdate   int64                                                                   `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Outcomes     []*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate `protobuf:"bytes,7,rep,name=outcomes,proto3" json:"outcomes,omitempty"`
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) Reset() {
	*x = MarketDefinitionsResponse_MarketGroup_MarketTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDefinitionsResponse_MarketGroup_MarketTemplate) ProtoMessage() {}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDefinitionsResponse_MarketGroup_MarketTemplate.ProtoReflect.Descriptor instead.
func (*MarketDefinitionsResponse_MarketGroup_MarketTemplate) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate) GetOutcomes() []*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate {
	if x != nil {
		return x.Outcomes
	}
	return nil
}

type MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sort         int32             `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32             `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Translations map[string]string `protobuf:"bytes,5,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LastUpdate   int64             `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) Reset() {
	*x = MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) ProtoMessage() {}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate.ProtoReflect.Descriptor instead.
func (*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{9, 0, 0, 0}
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type MatchesResponse_Sport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sort           int32                                 `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash           int32                                 `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate     int64                                 `protobuf:"varint,5,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations   map[string]string                     `protobuf:"bytes,6,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SportCountries []*MatchesResponse_Sport_SportCountry `protobuf:"bytes,7,rep,name=sport_countries,json=sportCountries,proto3" json:"sport_countries,omitempty"`
}

func (x *MatchesResponse_Sport) Reset() {
	*x = MatchesResponse_Sport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse_Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse_Sport) ProtoMessage() {}

func (x *MatchesResponse_Sport) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse_Sport.ProtoReflect.Descriptor instead.
func (*MatchesResponse_Sport) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MatchesResponse_Sport) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchesResponse_Sport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchesResponse_Sport) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MatchesResponse_Sport) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchesResponse_Sport) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchesResponse_Sport) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *MatchesResponse_Sport) GetSportCountries() []*MatchesResponse_Sport_SportCountry {
	if x != nil {
		return x.SportCountries
	}
	return nil
}

type MatchesResponse_Sport_Country struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Iso2         *string           `protobuf:"bytes,3,opt,name=iso2,proto3,oneof" json:"iso2,omitempty"`
	Sort         int32             `protobuf:"varint,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32             `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64             `protobuf:"varint,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string `protobuf:"bytes,7,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MatchesResponse_Sport_Country) Reset() {
	*x = MatchesResponse_Sport_Country{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse_Sport_Country) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse_Sport_Country) ProtoMessage() {}

func (x *MatchesResponse_Sport_Country) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse_Sport_Country.ProtoReflect.Descriptor instead.
func (*MatchesResponse_Sport_Country) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *MatchesResponse_Sport_Country) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchesResponse_Sport_Country) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchesResponse_Sport_Country) GetIso2() string {
	if x != nil && x.Iso2 != nil {
		return *x.Iso2
	}
	return ""
}

func (x *MatchesResponse_Sport_Country) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MatchesResponse_Sport_Country) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchesResponse_Sport_Country) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchesResponse_Sport_Country) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

type MatchesResponse_Sport_SportCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Country     *MatchesResponse_Sport_Country                   `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Tournaments []*MatchesResponse_Sport_SportCountry_Tournament `protobuf:"bytes,4,rep,name=tournaments,proto3" json:"tournaments,omitempty"`
}

func (x *MatchesResponse_Sport_SportCountry) Reset() {
	*x = MatchesResponse_Sport_SportCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse_Sport_SportCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse_Sport_SportCountry) ProtoMessage() {}

func (x *MatchesResponse_Sport_SportCountry) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse_Sport_SportCountry.ProtoReflect.Descriptor instead.
func (*MatchesResponse_Sport_SportCountry) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11, 0, 1}
}

func (x *MatchesResponse_Sport_SportCountry) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry) GetCountry() *MatchesResponse_Sport_Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MatchesResponse_Sport_SportCountry) GetTournaments() []*MatchesResponse_Sport_SportCountry_Tournament {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type MatchesResponse_Sport_SportCountry_Tournament struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsWomen      bool                                                   `protobuf:"varint,3,opt,name=is_women,json=isWomen,proto3" json:"is_women,omitempty"`
	IsYoung      bool                                                   `protobuf:"varint,4,opt,name=is_young,json=isYoung,proto3" json:"is_young,omitempty"`
	IsCyber      bool                                                   `protobuf:"varint,5,opt,name=is_cyber,json=isCyber,proto3" json:"is_cyber,omitempty"`
	IsDoubles    bool                                                   `protobuf:"varint,6,opt,name=is_doubles,json=isDoubles,proto3" json:"is_doubles,omitempty"`
	Sort         int32                                                  `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash         int32                                                  `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64                                                  `protobuf:"varint,9,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Translations map[string]string                                      `protobuf:"bytes,10,rep,name=translations,proto3" json:"translations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Matches      []*MatchesResponse_Sport_SportCountry_Tournament_Match `protobuf:"bytes,11,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) Reset() {
	*x = MatchesResponse_Sport_SportCountry_Tournament{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse_Sport_SportCountry_Tournament) ProtoMessage() {}

func (x *MatchesResponse_Sport_SportCountry_Tournament) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse_Sport_SportCountry_Tournament.ProtoReflect.Descriptor instead.
func (*MatchesResponse_Sport_SportCountry_Tournament) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11, 0, 1, 0}
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetIsWomen() bool {
	if x != nil {
		return x.IsWomen
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetIsYoung() bool {
	if x != nil {
		return x.IsYoung
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetIsCyber() bool {
	if x != nil {
		return x.IsCyber
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetIsDoubles() bool {
	if x != nil {
		return x.IsDoubles
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetTranslations() map[string]string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *MatchesResponse_Sport_SportCountry_Tournament) GetMatches() []*MatchesResponse_Sport_SportCountry_Tournament_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

type MatchesResponse_Sport_SportCountry_Tournament_Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchDate      int64       `protobuf:"varint,2,opt,name=match_date,json=matchDate,proto3" json:"match_date,omitempty"`
	SportId        int32       `protobuf:"varint,3,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	SportCountryId int32       `protobuf:"varint,4,opt,name=sport_country_id,json=sportCountryId,proto3" json:"sport_country_id,omitempty"`
	CountryId      int32       `protobuf:"varint,5,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	TournamentId   int32       `protobuf:"varint,6,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	HomeTeam       *Team       `protobuf:"bytes,7,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam       *Team       `protobuf:"bytes,8,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Status         EventStatus `protobuf:"varint,9,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	BetradarId     int32       `protobuf:"varint,10,opt,name=betradar_id,json=betradarId,proto3" json:"betradar_id,omitempty"`
	HasStream      bool        `protobuf:"varint,11,opt,name=has_stream,json=hasStream,proto3" json:"has_stream,omitempty"`
	HasScout       bool        `protobuf:"varint,12,opt,name=has_scout,json=hasScout,proto3" json:"has_scout,omitempty"`
	WillBeLive     bool        `protobuf:"varint,13,opt,name=will_be_live,json=willBeLive,proto3" json:"will_be_live,omitempty"`
	MatchInfo      []byte      `protobuf:"bytes,14,opt,name=matchInfo,proto3,oneof" json:"matchInfo,omitempty"`
	Priority       int32       `protobuf:"varint,17,opt,name=priority,proto3" json:"priority,omitempty"`
	Hash           int32       `protobuf:"varint,18,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate     int64       `protobuf:"varint,19,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) Reset() {
	*x = MatchesResponse_Sport_SportCountry_Tournament_Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchesResponse_Sport_SportCountry_Tournament_Match) ProtoMessage() {}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchesResponse_Sport_SportCountry_Tournament_Match.ProtoReflect.Descriptor instead.
func (*MatchesResponse_Sport_SportCountry_Tournament_Match) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{11, 0, 1, 0, 0}
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetMatchDate() int64 {
	if x != nil {
		return x.MatchDate
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetSportCountryId() int32 {
	if x != nil {
		return x.SportCountryId
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetBetradarId() int32 {
	if x != nil {
		return x.BetradarId
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetHasStream() bool {
	if x != nil {
		return x.HasStream
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetHasScout() bool {
	if x != nil {
		return x.HasScout
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetWillBeLive() bool {
	if x != nil {
		return x.WillBeLive
	}
	return false
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetMatchInfo() []byte {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchesResponse_Sport_SportCountry_Tournament_Match) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type MatchSnapshotsResponse_MatchSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchDate  int64                                        `protobuf:"varint,2,opt,name=match_date,json=matchDate,proto3" json:"match_date,omitempty"`
	Sport      *Sport                                       `protobuf:"bytes,3,opt,name=sport,proto3" json:"sport,omitempty"`
	Country    *Country                                     `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Tournament *Tournament                                  `protobuf:"bytes,5,opt,name=tournament,proto3" json:"tournament,omitempty"`
	HomeTeam   *Team                                        `protobuf:"bytes,6,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam   *Team                                        `protobuf:"bytes,7,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	Status     EventStatus                                  `protobuf:"varint,8,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	BetradarId int32                                        `protobuf:"varint,9,opt,name=betradar_id,json=betradarId,proto3" json:"betradar_id,omitempty"`
	HasStream  bool                                         `protobuf:"varint,10,opt,name=has_stream,json=hasStream,proto3" json:"has_stream,omitempty"`
	HasScout   bool                                         `protobuf:"varint,11,opt,name=has_scout,json=hasScout,proto3" json:"has_scout,omitempty"`
	WillBeLive bool                                         `protobuf:"varint,12,opt,name=will_be_live,json=willBeLive,proto3" json:"will_be_live,omitempty"`
	Priority   int32                                        `protobuf:"varint,13,opt,name=priority,proto3" json:"priority,omitempty"`
	MatchInfo  []byte                                       `protobuf:"bytes,14,opt,name=matchInfo,proto3,oneof" json:"matchInfo,omitempty"`
	Hash       int32                                        `protobuf:"varint,15,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate int64                                        `protobuf:"varint,16,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Games      []*MatchSnapshotsResponse_MatchSnapshot_Game `protobuf:"bytes,17,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *MatchSnapshotsResponse_MatchSnapshot) Reset() {
	*x = MatchSnapshotsResponse_MatchSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsResponse_MatchSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsResponse_MatchSnapshot) ProtoMessage() {}

func (x *MatchSnapshotsResponse_MatchSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsResponse_MatchSnapshot.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsResponse_MatchSnapshot) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{14, 0}
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetMatchDate() int64 {
	if x != nil {
		return x.MatchDate
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetSport() *Sport {
	if x != nil {
		return x.Sport
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetCountry() *Country {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetTournament() *Tournament {
	if x != nil {
		return x.Tournament
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetBetradarId() int32 {
	if x != nil {
		return x.BetradarId
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetHasStream() bool {
	if x != nil {
		return x.HasStream
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetHasScout() bool {
	if x != nil {
		return x.HasScout
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetWillBeLive() bool {
	if x != nil {
		return x.WillBeLive
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetMatchInfo() []byte {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot) GetGames() []*MatchSnapshotsResponse_MatchSnapshot_Game {
	if x != nil {
		return x.Games
	}
	return nil
}

type MatchSnapshotsResponse_MatchSnapshot_Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32                                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsMain     bool                                                `protobuf:"varint,2,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	GameType   int32                                               `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	GameInfo   []byte                                              `protobuf:"bytes,4,opt,name=game_info,json=gameInfo,proto3,oneof" json:"game_info,omitempty"`
	Status     EventStatus                                         `protobuf:"varint,5,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	Blocked    bool                                                `protobuf:"varint,6,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Hash       int32                                               `protobuf:"varint,7,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate int64                                               `protobuf:"varint,8,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Markets    []*MatchSnapshotsResponse_MatchSnapshot_Game_Market `protobuf:"bytes,9,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) Reset() {
	*x = MatchSnapshotsResponse_MatchSnapshot_Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsResponse_MatchSnapshot_Game) ProtoMessage() {}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsResponse_MatchSnapshot_Game.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsResponse_MatchSnapshot_Game) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetGameInfo() []byte {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game) GetMarkets() []*MatchSnapshotsResponse_MatchSnapshot_Game_Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

type MatchSnapshotsResponse_MatchSnapshot_Game_Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64                                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId      int32                                                   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupSort    int32                                                   `protobuf:"varint,3,opt,name=group_sort,json=groupSort,proto3" json:"group_sort,omitempty"`
	TemplateId   int32                                                   `protobuf:"varint,4,opt,name=template_id,json=templateId,proto3" json:"template_id,omitempty"`
	TemplateSort int32                                                   `protobuf:"varint,5,opt,name=template_sort,json=templateSort,proto3" json:"template_sort,omitempty"`
	IsMain       bool                                                    `protobuf:"varint,6,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	Live         bool                                                    `protobuf:"varint,7,opt,name=live,proto3" json:"live,omitempty"`
	Param        *MarketParam                                            `protobuf:"bytes,8,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Active       bool                                                    `protobuf:"varint,9,opt,name=active,proto3" json:"active,omitempty"`
	MostBalanced bool                                                    `protobuf:"varint,10,opt,name=most_balanced,json=mostBalanced,proto3" json:"most_balanced,omitempty"`
	Margin       int32                                                   `protobuf:"varint,11,opt,name=margin,proto3" json:"margin,omitempty"`
	Hash         int32                                                   `protobuf:"varint,12,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate   int64                                                   `protobuf:"varint,13,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Odds         []*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd `protobuf:"bytes,14,rep,name=odds,proto3" json:"odds,omitempty"`
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) Reset() {
	*x = MatchSnapshotsResponse_MatchSnapshot_Game_Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsResponse_MatchSnapshot_Game_Market) ProtoMessage() {}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsResponse_MatchSnapshot_Game_Market.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsResponse_MatchSnapshot_Game_Market) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{14, 0, 0, 0}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetGroupSort() int32 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetTemplateSort() int32 {
	if x != nil {
		return x.TemplateSort
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetParam() *MarketParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetMostBalanced() bool {
	if x != nil {
		return x.MostBalanced
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetMargin() int32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market) GetOdds() []*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd {
	if x != nil {
		return x.Odds
	}
	return nil
}

type MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OutcomeId   int32        `protobuf:"varint,2,opt,name=outcome_id,json=outcomeId,proto3" json:"outcome_id,omitempty"`
	Param       *MarketParam `protobuf:"bytes,3,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Active      bool         `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Value       int32        `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Probability int32        `protobuf:"varint,6,opt,name=probability,proto3" json:"probability,omitempty"`
	Blocked     bool         `protobuf:"varint,7,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Sort        int32        `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash        int32        `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) Reset() {
	*x = MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) ProtoMessage() {}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd.ProtoReflect.Descriptor instead.
func (*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{14, 0, 0, 0, 0}
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetOutcomeId() int32 {
	if x != nil {
		return x.OutcomeId
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetParam() *MarketParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type SyncDataResponseMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status EventStatus                  `protobuf:"varint,2,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	Hash   int32                        `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Games  []*SyncDataResponseMatchGame `protobuf:"bytes,4,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *SyncDataResponseMatch) Reset() {
	*x = SyncDataResponseMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDataResponseMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDataResponseMatch) ProtoMessage() {}

func (x *SyncDataResponseMatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDataResponseMatch.ProtoReflect.Descriptor instead.
func (*SyncDataResponseMatch) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{15, 0}
}

func (x *SyncDataResponseMatch) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyncDataResponseMatch) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *SyncDataResponseMatch) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *SyncDataResponseMatch) GetGames() []*SyncDataResponseMatchGame {
	if x != nil {
		return x.Games
	}
	return nil
}

type SyncDataResponseMatchGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status  EventStatus `protobuf:"varint,2,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	Blocked bool        `protobuf:"varint,3,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Hash    int32       `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SyncDataResponseMatchGame) Reset() {
	*x = SyncDataResponseMatchGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncDataResponseMatchGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDataResponseMatchGame) ProtoMessage() {}

func (x *SyncDataResponseMatchGame) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDataResponseMatchGame.ProtoReflect.Descriptor instead.
func (*SyncDataResponseMatchGame) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *SyncDataResponseMatchGame) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SyncDataResponseMatchGame) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *SyncDataResponseMatchGame) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *SyncDataResponseMatchGame) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type FeedUpdateData_GameUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32                                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchId     int32                                `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Status      EventStatus                          `protobuf:"varint,3,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	GameInfo    []byte                               `protobuf:"bytes,4,opt,name=game_info,json=gameInfo,proto3,oneof" json:"game_info,omitempty"`
	GameType    int32                                `protobuf:"varint,5,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	Blocked     bool                                 `protobuf:"varint,6,opt,name=blocked,proto3" json:"blocked,omitempty"`
	IsMain      bool                                 `protobuf:"varint,7,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	MarketCount int32                                `protobuf:"varint,8,opt,name=market_count,json=marketCount,proto3" json:"market_count,omitempty"`
	Hash        int32                                `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate  int64                                `protobuf:"varint,10,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Markets     []*FeedUpdateData_GameUpdate_Markets `protobuf:"bytes,11,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (x *FeedUpdateData_GameUpdate) Reset() {
	*x = FeedUpdateData_GameUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_GameUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_GameUpdate) ProtoMessage() {}

func (x *FeedUpdateData_GameUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_GameUpdate.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_GameUpdate) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 0}
}

func (x *FeedUpdateData_GameUpdate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *FeedUpdateData_GameUpdate) GetGameInfo() []byte {
	if x != nil {
		return x.GameInfo
	}
	return nil
}

func (x *FeedUpdateData_GameUpdate) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *FeedUpdateData_GameUpdate) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *FeedUpdateData_GameUpdate) GetMarketCount() int32 {
	if x != nil {
		return x.MarketCount
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate) GetMarkets() []*FeedUpdateData_GameUpdate_Markets {
	if x != nil {
		return x.Markets
	}
	return nil
}

type FeedUpdateData_MatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MatchDate      int64       `protobuf:"varint,2,opt,name=match_date,json=matchDate,proto3" json:"match_date,omitempty"`
	SportId        int32       `protobuf:"varint,3,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	CountryId      int32       `protobuf:"varint,4,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	SportCountryId int32       `protobuf:"varint,5,opt,name=sport_country_id,json=sportCountryId,proto3" json:"sport_country_id,omitempty"`
	TournamentId   int32       `protobuf:"varint,6,opt,name=tournament_id,json=tournamentId,proto3" json:"tournament_id,omitempty"`
	HomeId         int32       `protobuf:"varint,7,opt,name=home_id,json=homeId,proto3" json:"home_id,omitempty"`
	AwayId         int32       `protobuf:"varint,8,opt,name=away_id,json=awayId,proto3" json:"away_id,omitempty"`
	Status         EventStatus `protobuf:"varint,9,opt,name=status,proto3,enum=datafeed.EventStatus" json:"status,omitempty"`
	WillBeLive     bool        `protobuf:"varint,10,opt,name=will_be_live,json=willBeLive,proto3" json:"will_be_live,omitempty"`
	BetradarId     *int32      `protobuf:"varint,11,opt,name=betradar_id,json=betradarId,proto3,oneof" json:"betradar_id,omitempty"`
	HasStream      bool        `protobuf:"varint,12,opt,name=has_stream,json=hasStream,proto3" json:"has_stream,omitempty"`
	HasScout       bool        `protobuf:"varint,13,opt,name=has_scout,json=hasScout,proto3" json:"has_scout,omitempty"`
	Priority       int32       `protobuf:"varint,14,opt,name=priority,proto3" json:"priority,omitempty"`
	MatchInfo      []byte      `protobuf:"bytes,15,opt,name=match_info,json=matchInfo,proto3,oneof" json:"match_info,omitempty"`
	Hash           int32       `protobuf:"varint,16,opt,name=hash,proto3" json:"hash,omitempty"`
	LastUpdate     int64       `protobuf:"varint,17,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	GamesCount     int32       `protobuf:"varint,18,opt,name=games_count,json=gamesCount,proto3" json:"games_count,omitempty"`
}

func (x *FeedUpdateData_MatchUpdate) Reset() {
	*x = FeedUpdateData_MatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_MatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_MatchUpdate) ProtoMessage() {}

func (x *FeedUpdateData_MatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_MatchUpdate.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_MatchUpdate) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 1}
}

func (x *FeedUpdateData_MatchUpdate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetMatchDate() int64 {
	if x != nil {
		return x.MatchDate
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetSportId() int32 {
	if x != nil {
		return x.SportId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetSportCountryId() int32 {
	if x != nil {
		return x.SportCountryId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetTournamentId() int32 {
	if x != nil {
		return x.TournamentId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetHomeId() int32 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetAwayId() int32 {
	if x != nil {
		return x.AwayId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_not_active
}

func (x *FeedUpdateData_MatchUpdate) GetWillBeLive() bool {
	if x != nil {
		return x.WillBeLive
	}
	return false
}

func (x *FeedUpdateData_MatchUpdate) GetBetradarId() int32 {
	if x != nil && x.BetradarId != nil {
		return *x.BetradarId
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetHasStream() bool {
	if x != nil {
		return x.HasStream
	}
	return false
}

func (x *FeedUpdateData_MatchUpdate) GetHasScout() bool {
	if x != nil {
		return x.HasScout
	}
	return false
}

func (x *FeedUpdateData_MatchUpdate) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetMatchInfo() []byte {
	if x != nil {
		return x.MatchInfo
	}
	return nil
}

func (x *FeedUpdateData_MatchUpdate) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *FeedUpdateData_MatchUpdate) GetGamesCount() int32 {
	if x != nil {
		return x.GamesCount
	}
	return 0
}

type FeedUpdateData_MatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  int32  `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GameType int32  `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	Status   int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Result   string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *FeedUpdateData_MatchResult) Reset() {
	*x = FeedUpdateData_MatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_MatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_MatchResult) ProtoMessage() {}

func (x *FeedUpdateData_MatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_MatchResult.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_MatchResult) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 2}
}

func (x *FeedUpdateData_MatchResult) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *FeedUpdateData_MatchResult) GetGameType() int32 {
	if x != nil {
		return x.GameType
	}
	return 0
}

func (x *FeedUpdateData_MatchResult) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FeedUpdateData_MatchResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type FeedUpdateData_Settlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OddId     int64             `protobuf:"varint,1,opt,name=odd_id,json=oddId,proto3" json:"odd_id,omitempty"`
	Status    SettlementStatus  `protobuf:"varint,2,opt,name=status,proto3,enum=datafeed.SettlementStatus" json:"status,omitempty"`
	OldStatus *SettlementStatus `protobuf:"varint,3,opt,name=old_status,json=oldStatus,proto3,enum=datafeed.SettlementStatus,oneof" json:"old_status,omitempty"`
}

func (x *FeedUpdateData_Settlement) Reset() {
	*x = FeedUpdateData_Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_Settlement) ProtoMessage() {}

func (x *FeedUpdateData_Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_Settlement.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_Settlement) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 3}
}

func (x *FeedUpdateData_Settlement) GetOddId() int64 {
	if x != nil {
		return x.OddId
	}
	return 0
}

func (x *FeedUpdateData_Settlement) GetStatus() SettlementStatus {
	if x != nil {
		return x.Status
	}
	return SettlementStatus_unsettled
}

func (x *FeedUpdateData_Settlement) GetOldStatus() SettlementStatus {
	if x != nil && x.OldStatus != nil {
		return *x.OldStatus
	}
	return SettlementStatus_unsettled
}

type FeedUpdateData_GameUpdate_Markets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsMain         bool                                      `protobuf:"varint,2,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	GroupId        int32                                     `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MarketTemplate int32                                     `protobuf:"varint,4,opt,name=market_template,json=marketTemplate,proto3" json:"market_template,omitempty"`
	Param          *MarketParam                              `protobuf:"bytes,5,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Active         bool                                      `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	Live           bool                                      `protobuf:"varint,7,opt,name=live,proto3" json:"live,omitempty"`
	Margin         int32                                     `protobuf:"varint,8,opt,name=margin,proto3" json:"margin,omitempty"`
	Hash           int32                                     `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
	MarketSort     int32                                     `protobuf:"varint,10,opt,name=market_sort,json=marketSort,proto3" json:"market_sort,omitempty"`
	GroupSort      int32                                     `protobuf:"varint,11,opt,name=group_sort,json=groupSort,proto3" json:"group_sort,omitempty"`
	MostBalanced   bool                                      `protobuf:"varint,12,opt,name=most_balanced,json=mostBalanced,proto3" json:"most_balanced,omitempty"`
	LastUpdate     int64                                     `protobuf:"varint,13,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Odds           []*FeedUpdateData_GameUpdate_Markets_Odds `protobuf:"bytes,14,rep,name=odds,proto3" json:"odds,omitempty"`
}

func (x *FeedUpdateData_GameUpdate_Markets) Reset() {
	*x = FeedUpdateData_GameUpdate_Markets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_GameUpdate_Markets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_GameUpdate_Markets) ProtoMessage() {}

func (x *FeedUpdateData_GameUpdate_Markets) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_GameUpdate_Markets.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_GameUpdate_Markets) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *FeedUpdateData_GameUpdate_Markets) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetMarketTemplate() int32 {
	if x != nil {
		return x.MarketTemplate
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetParam() *MarketParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *FeedUpdateData_GameUpdate_Markets) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets) GetMargin() int32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetMarketSort() int32 {
	if x != nil {
		return x.MarketSort
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetGroupSort() int32 {
	if x != nil {
		return x.GroupSort
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetMostBalanced() bool {
	if x != nil {
		return x.MostBalanced
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets) GetOdds() []*FeedUpdateData_GameUpdate_Markets_Odds {
	if x != nil {
		return x.Odds
	}
	return nil
}

type FeedUpdateData_GameUpdate_Markets_Odds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OutcomeId   int32        `protobuf:"varint,2,opt,name=outcome_id,json=outcomeId,proto3" json:"outcome_id,omitempty"`
	Param       *MarketParam `protobuf:"bytes,3,opt,name=param,proto3,oneof" json:"param,omitempty"`
	Active      bool         `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Value       int32        `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Probability int32        `protobuf:"varint,6,opt,name=probability,proto3" json:"probability,omitempty"`
	Blocked     bool         `protobuf:"varint,7,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Sort        int32        `protobuf:"varint,8,opt,name=sort,proto3" json:"sort,omitempty"`
	Hash        int32        `protobuf:"varint,9,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) Reset() {
	*x = FeedUpdateData_GameUpdate_Markets_Odds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedUpdateData_GameUpdate_Markets_Odds) ProtoMessage() {}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedUpdateData_GameUpdate_Markets_Odds.ProtoReflect.Descriptor instead.
func (*FeedUpdateData_GameUpdate_Markets_Odds) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{16, 0, 0, 0}
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetOutcomeId() int32 {
	if x != nil {
		return x.OutcomeId
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetParam() *MarketParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *FeedUpdateData_GameUpdate_Markets_Odds) GetHash() int32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

type BetControlResponse_BetControlStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OddsId       int64       `protobuf:"varint,1,opt,name=odds_id,json=oddsId,proto3" json:"odds_id,omitempty"`
	GameId       int32       `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	MatchId      int32       `protobuf:"varint,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MarketId     int64       `protobuf:"varint,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	OddActive    bool        `protobuf:"varint,5,opt,name=odd_active,json=oddActive,proto3" json:"odd_active,omitempty"`
	OddsValue    int32       `protobuf:"varint,6,opt,name=odds_value,json=oddsValue,proto3" json:"odds_value,omitempty"`
	GameStatus   EventStatus `protobuf:"varint,7,opt,name=game_status,json=gameStatus,proto3,enum=datafeed.EventStatus" json:"game_status,omitempty"`
	GameBlocked  bool        `protobuf:"varint,8,opt,name=game_blocked,json=gameBlocked,proto3" json:"game_blocked,omitempty"`
	MatchStatus  EventStatus `protobuf:"varint,9,opt,name=match_status,json=matchStatus,proto3,enum=datafeed.EventStatus" json:"match_status,omitempty"`
	OddsBlocked  bool        `protobuf:"varint,10,opt,name=odds_blocked,json=oddsBlocked,proto3" json:"odds_blocked,omitempty"`
	MarketActive bool        `protobuf:"varint,11,opt,name=market_active,json=marketActive,proto3" json:"market_active,omitempty"`
	IsSafe       bool        `protobuf:"varint,12,opt,name=is_safe,json=isSafe,proto3" json:"is_safe,omitempty"`
	Margin       int32       `protobuf:"varint,13,opt,name=margin,proto3" json:"margin,omitempty"`
	Probability  int32       `protobuf:"varint,14,opt,name=probability,proto3" json:"probability,omitempty"`
}

func (x *BetControlResponse_BetControlStatus) Reset() {
	*x = BetControlResponse_BetControlStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_internal_proto_data_feed_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BetControlResponse_BetControlStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BetControlResponse_BetControlStatus) ProtoMessage() {}

func (x *BetControlResponse_BetControlStatus) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_data_feed_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BetControlResponse_BetControlStatus.ProtoReflect.Descriptor instead.
func (*BetControlResponse_BetControlStatus) Descriptor() ([]byte, []int) {
	return file_internal_proto_data_feed_proto_rawDescGZIP(), []int{18, 0}
}

func (x *BetControlResponse_BetControlStatus) GetOddsId() int64 {
	if x != nil {
		return x.OddsId
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetMatchId() int32 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetMarketId() int64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetOddActive() bool {
	if x != nil {
		return x.OddActive
	}
	return false
}

func (x *BetControlResponse_BetControlStatus) GetOddsValue() int32 {
	if x != nil {
		return x.OddsValue
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetGameStatus() EventStatus {
	if x != nil {
		return x.GameStatus
	}
	return EventStatus_not_active
}

func (x *BetControlResponse_BetControlStatus) GetGameBlocked() bool {
	if x != nil {
		return x.GameBlocked
	}
	return false
}

func (x *BetControlResponse_BetControlStatus) GetMatchStatus() EventStatus {
	if x != nil {
		return x.MatchStatus
	}
	return EventStatus_not_active
}

func (x *BetControlResponse_BetControlStatus) GetOddsBlocked() bool {
	if x != nil {
		return x.OddsBlocked
	}
	return false
}

func (x *BetControlResponse_BetControlStatus) GetMarketActive() bool {
	if x != nil {
		return x.MarketActive
	}
	return false
}

func (x *BetControlResponse_BetControlStatus) GetIsSafe() bool {
	if x != nil {
		return x.IsSafe
	}
	return false
}

func (x *BetControlResponse_BetControlStatus) GetMargin() int32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *BetControlResponse_BetControlStatus) GetProbability() int32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

var File_internal_proto_data_feed_proto protoreflect.FileDescriptor

var file_internal_proto_data_feed_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x73, 0x6f, 0x32, 0x22, 0x79, 0x0a, 0x0d, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7d, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0xb3, 0x03,
	0x0a, 0x0a, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x77, 0x6f, 0x6d, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x57, 0x6f, 0x6d, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x79,
	0x6f, 0x75, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x59, 0x6f,
	0x75, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x79, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x81, 0x02, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x11, 0x54, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x83, 0x01, 0x0a,
	0x12, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa1, 0x0a, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf9,
	0x08, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x65, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x41, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xe9, 0x05,
	0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x74, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x1a,
	0xc6, 0x02, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x84, 0x01, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xac, 0x10, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x9e, 0x0f, 0x0a, 0x05, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xb8,
	0x02, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x73, 0x6f, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x73, 0x6f, 0x32, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x73, 0x6f, 0x32, 0x1a, 0xfd, 0x09, 0x0a, 0x0c, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x59, 0x0a,
	0x0b, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xbe, 0x08, 0x0a, 0x0a, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x77, 0x6f, 0x6d, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x57, 0x6f, 0x6d, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x79, 0x6f, 0x75,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x59, 0x6f, 0x75, 0x6e,
	0x67, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x43, 0x79, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x1a, 0xc9, 0x04, 0x0a,
	0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x09, 0x61,
	0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08,
	0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65,
	0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53,
	0x63, 0x6f, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x6c, 0x6c,
	0x42, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x22, 0x73, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x19, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69,
	0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6c, 0x6f, 0x77, 0x22, 0xfb, 0x0e, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd7, 0x0d,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x72, 0x61, 0x64, 0x61, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x75, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53, 0x63, 0x6f, 0x75, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x6c, 0x6c, 0x42, 0x65, 0x4c, 0x69, 0x76, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x1a,
	0xb7, 0x08, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x54,
	0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x73, 0x1a, 0xe4, 0x05, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d,
	0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x4f, 0x64, 0x64, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x1a, 0x82, 0x02, 0x0a,
	0x03, 0x4f, 0x64, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x9c, 0x03, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x8c, 0x02, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x1a, 0x73, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x8c, 0x12, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0xe4, 0x08, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0xdc, 0x05, 0x0a, 0x07, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x73, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4f,
	0x64, 0x64, 0x73, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x1a, 0x83, 0x02, 0x0a, 0x04, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xdf, 0x04, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x77, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x62, 0x65, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x6c, 0x6c, 0x42, 0x65, 0x4c, 0x69,
	0x76, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x65, 0x74, 0x72, 0x61,
	0x64, 0x61, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x63, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x53,
	0x63, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62,
	0x65, 0x74, 0x72, 0x61, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0x75, 0x0a, 0x0b, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x1a, 0xa6, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x64, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x64, 0x64, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x6c,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2d, 0x0a, 0x11, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x73,
	0x22, 0xf8, 0x04, 0x0a, 0x12, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xea,
	0x03, 0x0a, 0x10, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x64, 0x64, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x64, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6f, 0x64, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x64, 0x64, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x64, 0x64, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x64, 0x64, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x73,
	0x61, 0x66, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x53, 0x61, 0x66,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0x38, 0x0a, 0x0b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6c,
	0x69, 0x76, 0x65, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x6e, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x6f, 0x6e, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x77, 0x6f, 0x6e, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x74, 0x10, 0x05, 0x32, 0x9b, 0x05, 0x0a, 0x0b, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x46, 0x65, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x30, 0x01, 0x12,
	0x3e, 0x0a, 0x08, 0x53, 0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x1b, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x42, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xaa, 0x02, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x65, 0x65, 0x64, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_internal_proto_data_feed_proto_rawDescOnce sync.Once
	file_internal_proto_data_feed_proto_rawDescData = file_internal_proto_data_feed_proto_rawDesc
)

func file_internal_proto_data_feed_proto_rawDescGZIP() []byte {
	file_internal_proto_data_feed_proto_rawDescOnce.Do(func() {
		file_internal_proto_data_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_proto_data_feed_proto_rawDescData)
	})
	return file_internal_proto_data_feed_proto_rawDescData
}

var file_internal_proto_data_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internal_proto_data_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_internal_proto_data_feed_proto_goTypes = []interface{}{
	(EventStatus)(0),                  // 0: datafeed.EventStatus
	(SettlementStatus)(0),             // 1: datafeed.SettlementStatus
	(*Sport)(nil),                     // 2: datafeed.Sport
	(*Country)(nil),                   // 3: datafeed.Country
	(*SportResponse)(nil),             // 4: datafeed.SportResponse
	(*CountryResponse)(nil),           // 5: datafeed.CountryResponse
	(*SportCountry)(nil),              // 6: datafeed.SportCountry
	(*Tournament)(nil),                // 7: datafeed.Tournament
	(*Team)(nil),                      // 8: datafeed.Team
	(*TournamentRequest)(nil),         // 9: datafeed.TournamentRequest
	(*TournamentResponse)(nil),        // 10: datafeed.TournamentResponse
	(*MarketDefinitionsResponse)(nil), // 11: datafeed.MarketDefinitionsResponse
	(*MatchesRequest)(nil),            // 12: datafeed.MatchesRequest
	(*MatchesResponse)(nil),           // 13: datafeed.MatchesResponse
	(*MatchSnapshotsRequest)(nil),     // 14: datafeed.MatchSnapshotsRequest
	(*MarketParam)(nil),               // 15: datafeed.MarketParam
	(*MatchSnapshotsResponse)(nil),    // 16: datafeed.MatchSnapshotsResponse
	(*SyncDataResponse)(nil),          // 17: datafeed.SyncDataResponse
	(*FeedUpdateData)(nil),            // 18: datafeed.FeedUpdateData
	(*BetControlRequest)(nil),         // 19: datafeed.BetControlRequest
	(*BetControlResponse)(nil),        // 20: datafeed.BetControlResponse
	nil,                               // 21: datafeed.Sport.TranslationsEntry
	nil,                               // 22: datafeed.Country.TranslationsEntry
	nil,                               // 23: datafeed.Tournament.TranslationsEntry
	nil,                               // 24: datafeed.Team.TranslationsEntry
	(*MarketDefinitionsResponse_MarketGroup)(nil),                // 25: datafeed.MarketDefinitionsResponse.MarketGroup
	(*MarketDefinitionsResponse_MarketGroup_MarketTemplate)(nil), // 26: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate
	nil, // 27: datafeed.MarketDefinitionsResponse.MarketGroup.TranslationsEntry
	(*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate)(nil), // 28: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.OutcomeTemplate
	nil,                                   // 29: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.TranslationsEntry
	nil,                                   // 30: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.OutcomeTemplate.TranslationsEntry
	(*MatchesResponse_Sport)(nil),         // 31: datafeed.MatchesResponse.Sport
	(*MatchesResponse_Sport_Country)(nil), // 32: datafeed.MatchesResponse.Sport.Country
	(*MatchesResponse_Sport_SportCountry)(nil), // 33: datafeed.MatchesResponse.Sport.SportCountry
	nil, // 34: datafeed.MatchesResponse.Sport.TranslationsEntry
	nil, // 35: datafeed.MatchesResponse.Sport.Country.TranslationsEntry
	(*MatchesResponse_Sport_SportCountry_Tournament)(nil),       // 36: datafeed.MatchesResponse.Sport.SportCountry.Tournament
	(*MatchesResponse_Sport_SportCountry_Tournament_Match)(nil), // 37: datafeed.MatchesResponse.Sport.SportCountry.Tournament.Match
	nil, // 38: datafeed.MatchesResponse.Sport.SportCountry.Tournament.TranslationsEntry
	(*MatchSnapshotsResponse_MatchSnapshot)(nil),                 // 39: datafeed.MatchSnapshotsResponse.MatchSnapshot
	(*MatchSnapshotsResponse_MatchSnapshot_Game)(nil),            // 40: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game
	(*MatchSnapshotsResponse_MatchSnapshot_Game_Market)(nil),     // 41: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market
	(*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd)(nil), // 42: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market.Odd
	(*SyncDataResponseMatch)(nil),                                // 43: datafeed.SyncDataResponse.match
	(*SyncDataResponseMatchGame)(nil),                            // 44: datafeed.SyncDataResponse.match.game
	(*FeedUpdateData_GameUpdate)(nil),                            // 45: datafeed.FeedUpdateData.GameUpdate
	(*FeedUpdateData_MatchUpdate)(nil),                           // 46: datafeed.FeedUpdateData.MatchUpdate
	(*FeedUpdateData_MatchResult)(nil),                           // 47: datafeed.FeedUpdateData.MatchResult
	(*FeedUpdateData_Settlement)(nil),                            // 48: datafeed.FeedUpdateData.Settlement
	(*FeedUpdateData_GameUpdate_Markets)(nil),                    // 49: datafeed.FeedUpdateData.GameUpdate.Markets
	(*FeedUpdateData_GameUpdate_Markets_Odds)(nil),               // 50: datafeed.FeedUpdateData.GameUpdate.Markets.Odds
	(*BetControlResponse_BetControlStatus)(nil),                  // 51: datafeed.BetControlResponse.BetControlStatus
	(*emptypb.Empty)(nil),                                        // 52: google.protobuf.Empty
}
var file_internal_proto_data_feed_proto_depIdxs = []int32{
	21, // 0: datafeed.Sport.translations:type_name -> datafeed.Sport.TranslationsEntry
	22, // 1: datafeed.Country.translations:type_name -> datafeed.Country.TranslationsEntry
	2,  // 2: datafeed.SportResponse.data:type_name -> datafeed.Sport
	3,  // 3: datafeed.CountryResponse.data:type_name -> datafeed.Country
	6,  // 4: datafeed.Tournament.sport_country:type_name -> datafeed.SportCountry
	23, // 5: datafeed.Tournament.translations:type_name -> datafeed.Tournament.TranslationsEntry
	24, // 6: datafeed.Team.translations:type_name -> datafeed.Team.TranslationsEntry
	7,  // 7: datafeed.TournamentResponse.data:type_name -> datafeed.Tournament
	25, // 8: datafeed.MarketDefinitionsResponse.data:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup
	0,  // 9: datafeed.MatchesRequest.status:type_name -> datafeed.EventStatus
	31, // 10: datafeed.MatchesResponse.data:type_name -> datafeed.MatchesResponse.Sport
	39, // 11: datafeed.MatchSnapshotsResponse.data:type_name -> datafeed.MatchSnapshotsResponse.MatchSnapshot
	43, // 12: datafeed.SyncDataResponse.data:type_name -> datafeed.SyncDataResponse.match
	46, // 13: datafeed.FeedUpdateData.match:type_name -> datafeed.FeedUpdateData.MatchUpdate
	45, // 14: datafeed.FeedUpdateData.game:type_name -> datafeed.FeedUpdateData.GameUpdate
	47, // 15: datafeed.FeedUpdateData.match_result:type_name -> datafeed.FeedUpdateData.MatchResult
	48, // 16: datafeed.FeedUpdateData.settlement:type_name -> datafeed.FeedUpdateData.Settlement
	51, // 17: datafeed.BetControlResponse.data:type_name -> datafeed.BetControlResponse.BetControlStatus
	27, // 18: datafeed.MarketDefinitionsResponse.MarketGroup.translations:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup.TranslationsEntry
	26, // 19: datafeed.MarketDefinitionsResponse.MarketGroup.market_templates:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate
	29, // 20: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.translations:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.TranslationsEntry
	28, // 21: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.outcomes:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.OutcomeTemplate
	30, // 22: datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.OutcomeTemplate.translations:type_name -> datafeed.MarketDefinitionsResponse.MarketGroup.MarketTemplate.OutcomeTemplate.TranslationsEntry
	34, // 23: datafeed.MatchesResponse.Sport.translations:type_name -> datafeed.MatchesResponse.Sport.TranslationsEntry
	33, // 24: datafeed.MatchesResponse.Sport.sport_countries:type_name -> datafeed.MatchesResponse.Sport.SportCountry
	35, // 25: datafeed.MatchesResponse.Sport.Country.translations:type_name -> datafeed.MatchesResponse.Sport.Country.TranslationsEntry
	32, // 26: datafeed.MatchesResponse.Sport.SportCountry.country:type_name -> datafeed.MatchesResponse.Sport.Country
	36, // 27: datafeed.MatchesResponse.Sport.SportCountry.tournaments:type_name -> datafeed.MatchesResponse.Sport.SportCountry.Tournament
	38, // 28: datafeed.MatchesResponse.Sport.SportCountry.Tournament.translations:type_name -> datafeed.MatchesResponse.Sport.SportCountry.Tournament.TranslationsEntry
	37, // 29: datafeed.MatchesResponse.Sport.SportCountry.Tournament.matches:type_name -> datafeed.MatchesResponse.Sport.SportCountry.Tournament.Match
	8,  // 30: datafeed.MatchesResponse.Sport.SportCountry.Tournament.Match.home_team:type_name -> datafeed.Team
	8,  // 31: datafeed.MatchesResponse.Sport.SportCountry.Tournament.Match.away_team:type_name -> datafeed.Team
	0,  // 32: datafeed.MatchesResponse.Sport.SportCountry.Tournament.Match.status:type_name -> datafeed.EventStatus
	2,  // 33: datafeed.MatchSnapshotsResponse.MatchSnapshot.sport:type_name -> datafeed.Sport
	3,  // 34: datafeed.MatchSnapshotsResponse.MatchSnapshot.country:type_name -> datafeed.Country
	7,  // 35: datafeed.MatchSnapshotsResponse.MatchSnapshot.tournament:type_name -> datafeed.Tournament
	8,  // 36: datafeed.MatchSnapshotsResponse.MatchSnapshot.home_team:type_name -> datafeed.Team
	8,  // 37: datafeed.MatchSnapshotsResponse.MatchSnapshot.away_team:type_name -> datafeed.Team
	0,  // 38: datafeed.MatchSnapshotsResponse.MatchSnapshot.status:type_name -> datafeed.EventStatus
	40, // 39: datafeed.MatchSnapshotsResponse.MatchSnapshot.games:type_name -> datafeed.MatchSnapshotsResponse.MatchSnapshot.Game
	0,  // 40: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.status:type_name -> datafeed.EventStatus
	41, // 41: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.markets:type_name -> datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market
	15, // 42: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market.param:type_name -> datafeed.MarketParam
	42, // 43: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market.odds:type_name -> datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market.Odd
	15, // 44: datafeed.MatchSnapshotsResponse.MatchSnapshot.Game.Market.Odd.param:type_name -> datafeed.MarketParam
	0,  // 45: datafeed.SyncDataResponse.match.status:type_name -> datafeed.EventStatus
	44, // 46: datafeed.SyncDataResponse.match.games:type_name -> datafeed.SyncDataResponse.match.game
	0,  // 47: datafeed.SyncDataResponse.match.game.status:type_name -> datafeed.EventStatus
	0,  // 48: datafeed.FeedUpdateData.GameUpdate.status:type_name -> datafeed.EventStatus
	49, // 49: datafeed.FeedUpdateData.GameUpdate.markets:type_name -> datafeed.FeedUpdateData.GameUpdate.Markets
	0,  // 50: datafeed.FeedUpdateData.MatchUpdate.status:type_name -> datafeed.EventStatus
	1,  // 51: datafeed.FeedUpdateData.Settlement.status:type_name -> datafeed.SettlementStatus
	1,  // 52: datafeed.FeedUpdateData.Settlement.old_status:type_name -> datafeed.SettlementStatus
	15, // 53: datafeed.FeedUpdateData.GameUpdate.Markets.param:type_name -> datafeed.MarketParam
	50, // 54: datafeed.FeedUpdateData.GameUpdate.Markets.odds:type_name -> datafeed.FeedUpdateData.GameUpdate.Markets.Odds
	15, // 55: datafeed.FeedUpdateData.GameUpdate.Markets.Odds.param:type_name -> datafeed.MarketParam
	0,  // 56: datafeed.BetControlResponse.BetControlStatus.game_status:type_name -> datafeed.EventStatus
	0,  // 57: datafeed.BetControlResponse.BetControlStatus.match_status:type_name -> datafeed.EventStatus
	52, // 58: datafeed.FeedService.GetSports:input_type -> google.protobuf.Empty
	52, // 59: datafeed.FeedService.GetCountries:input_type -> google.protobuf.Empty
	9,  // 60: datafeed.FeedService.GetTournaments:input_type -> datafeed.TournamentRequest
	52, // 61: datafeed.FeedService.GetMarketDefinitions:input_type -> google.protobuf.Empty
	12, // 62: datafeed.FeedService.GetMatches:input_type -> datafeed.MatchesRequest
	14, // 63: datafeed.FeedService.GetMatchSnapshots:input_type -> datafeed.MatchSnapshotsRequest
	52, // 64: datafeed.FeedService.SubscribeToFeed:input_type -> google.protobuf.Empty
	52, // 65: datafeed.FeedService.SyncData:input_type -> google.protobuf.Empty
	19, // 66: datafeed.FeedService.BetControl:input_type -> datafeed.BetControlRequest
	4,  // 67: datafeed.FeedService.GetSports:output_type -> datafeed.SportResponse
	5,  // 68: datafeed.FeedService.GetCountries:output_type -> datafeed.CountryResponse
	10, // 69: datafeed.FeedService.GetTournaments:output_type -> datafeed.TournamentResponse
	11, // 70: datafeed.FeedService.GetMarketDefinitions:output_type -> datafeed.MarketDefinitionsResponse
	13, // 71: datafeed.FeedService.GetMatches:output_type -> datafeed.MatchesResponse
	16, // 72: datafeed.FeedService.GetMatchSnapshots:output_type -> datafeed.MatchSnapshotsResponse
	18, // 73: datafeed.FeedService.SubscribeToFeed:output_type -> datafeed.FeedUpdateData
	17, // 74: datafeed.FeedService.SyncData:output_type -> datafeed.SyncDataResponse
	20, // 75: datafeed.FeedService.BetControl:output_type -> datafeed.BetControlResponse
	67, // [67:76] is the sub-list for method output_type
	58, // [58:67] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_internal_proto_data_feed_proto_init() }
func file_internal_proto_data_feed_proto_init() {
	if File_internal_proto_data_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_internal_proto_data_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDefinitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDefinitionsResponse_MarketGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDefinitionsResponse_MarketGroup_MarketTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDefinitionsResponse_MarketGroup_MarketTemplate_OutcomeTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse_Sport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse_Sport_Country); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse_Sport_SportCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse_Sport_SportCountry_Tournament); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchesResponse_Sport_SportCountry_Tournament_Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsResponse_MatchSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsResponse_MatchSnapshot_Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsResponse_MatchSnapshot_Game_Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSnapshotsResponse_MatchSnapshot_Game_Market_Odd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDataResponseMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncDataResponseMatchGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_GameUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_MatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_MatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_GameUpdate_Markets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedUpdateData_GameUpdate_Markets_Odds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_internal_proto_data_feed_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BetControlResponse_BetControlStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_internal_proto_data_feed_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FeedUpdateData_Match)(nil),
		(*FeedUpdateData_Game)(nil),
		(*FeedUpdateData_MatchResult_)(nil),
		(*FeedUpdateData_Settlement_)(nil),
	}
	file_internal_proto_data_feed_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[43].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[47].OneofWrappers = []interface{}{}
	file_internal_proto_data_feed_proto_msgTypes[48].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_proto_data_feed_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_proto_data_feed_proto_goTypes,
		DependencyIndexes: file_internal_proto_data_feed_proto_depIdxs,
		EnumInfos:         file_internal_proto_data_feed_proto_enumTypes,
		MessageInfos:      file_internal_proto_data_feed_proto_msgTypes,
	}.Build()
	File_internal_proto_data_feed_proto = out.File
	file_internal_proto_data_feed_proto_rawDesc = nil
	file_internal_proto_data_feed_proto_goTypes = nil
	file_internal_proto_data_feed_proto_depIdxs = nil
}
